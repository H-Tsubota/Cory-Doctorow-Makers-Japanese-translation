#!/usr/bin/env python
# -*- encoding: utf-8 -*-

import time
import os
import shutil
import zipfile
import datetime
import codecs
import collections
import uuid
import urllib2
import re
from xml.etree.ElementTree import Element, SubElement, Comment
from xml.etree import ElementTree
from xml.dom import minidom

class osEpub3():
	def __init__(self):
		self.xmlComment = 'Generated by OpenShelf Epub3 Generator 1.0'
		self.coverImage = None
		self.title = '---'
		self.subTitle = None
		self.language = "ja"
		self.creator = '---'
		self.translator = '---'
		self.publisher = 'Open Shelf Publishing'
		self.coverPage = None
		self.contents =collections.OrderedDict() #pairs of RelativePath-TitleString
		self.css = []
		self.images = []
		now = datetime.datetime.utcnow()
		delta = datetime.timedelta(hours=9)
		self.datetime = now.strftime("%Y-%m-%dT%H:%M:%SZ")
		self.version = 1.0
		self.isVertical = False

	def writeMimetype(self, path):
		f = open(path,'w')
		f.write(u'application/epub+zip')
		f.close()
		
	def writeContainer(self, path):
		root = Element('container', {'xmlns':'urn:oasis:names:tc:opendocument:xmlns:container', 'version':'1.0'})
		root.append(Comment(self.xmlComment))
		rootfiles = SubElement(root, 'rootfiles')
		SubElement(rootfiles, 'rootfile', {'full-path':'OEBPS/bookInfo.opf', 'media-type':'application/oebps-package+xml'})
		
		rough_string = ElementTree.tostring(root, 'utf-8')
		reparsed = minidom.parseString(rough_string)
		contents = reparsed.toprettyxml()
		contents = contents.replace('<?xml version="1.0" ?>', '<?xml version="1.0" encoding="UTF-8"?>')

		f = open(path, 'w')
		f.write(contents.encode('utf-8'))
		f.close()
		
	def writeOpf(self, path):		
		root = Element('package', {'unique-identifier':'BookID', 'xmlns':'http://www.idpf.org/2007/opf', 'version':'3.0'})
		root.append(Comment(self.xmlComment))
		
		# Make book id with UUID
		key = self.title + self.creator + self.publisher + str(self.version)
		urlEncoded = urllib2.quote(key.encode("utf-8"))
		bookID = uuid.uuid3(uuid.NAMESPACE_DNS, urlEncoded)
		
		# Write metadata
		metadata = SubElement(root, 'metadata', {'xmlns:dc':'http://purl.org/dc/elements/1.1/'})
		SubElement(metadata, 'dc:title').text = self.title
		SubElement(metadata, 'dc:identifier', {'id':'BookID'}).text = str(bookID)
		SubElement(metadata, 'dc:language').text = self.language
		SubElement(metadata, 'dc:date').text = self.datetime
		SubElement(metadata, 'dc:creator', {'id':'creator'}).text = self.creator
		SubElement(metadata, 'meta', {'refines' : '#creator', 'property' : 'role', 'scheme' : 'marc:relators', 'id':'role' }).text = 'aut'
		SubElement(metadata, 'dc:creator', {'id':'translator'}).text = self.translator
		SubElement(metadata, 'meta', {'refines' : '#translator', 'property' : 'role', 'scheme' : 'marc:relators'}).text = 'aut'
		SubElement(metadata, 'dc:publisher').text = self.publisher
		SubElement(metadata, 'meta', {'property':'dcterms:modified'}).text = self.datetime
		SubElement(metadata, 'meta', {'name':'cover', 'content':'coverimage-kindle'})
		
		# Write manifest		
		manifest = SubElement(root, 'manifest')
		SubElement(manifest, 'item', {'id':'coverimage', 'properties':'cover-image', 'href':'cover.png', 'media-type':'image/png'})
		SubElement(manifest, 'item', {'id':'coverimage-kindle', 'href':'cover-kindle.png', 'media-type':'image/png'})
		SubElement(manifest, 'item', {'id':'coverpage', 'href':'cover.xhtml', 'media-type':'application/xhtml+xml'})
		SubElement(manifest, 'item', {'id':'toc', 'properties':'nav', 'href':'nav.xhtml', 'media-type':'application/xhtml+xml'})
		SubElement(manifest, 'item', {'id':'cssNav', 'href':'nav.css', 'media-type':'text/css'})
		
		i = 0
		for image in self.images:
			i += 1
			filename = os.path.basename(image)
			base, ext = os.path.splitext(filename)
			ext = ext.replace(".", "")
			SubElement(manifest, 'item', {'id':'image'+str(i), 'href':filename, 'media-type':'image/' + ext})
			
		i = 0
		for c in self.css:
			i += 1
			filename = os.path.basename(c)
			SubElement(manifest, 'item', {'id':'css'+str(i), 'href':filename, 'media-type':'text/css'})
		
		i = 0
		xhtmls = self.contents.keys()
		for xhtml in xhtmls:
			i += 1
			filename = os.path.basename(xhtml)
			SubElement(manifest, 'item', {'id':'xhtml'+str(i), 'href':filename, 'media-type':'application/xhtml+xml'})
		
		pageDirection = 'ltr'
		if self.isVertical:
			SubElement(manifest, 'item', {'id':'cssVertical'+str(i), 'href':'vertical.css', 'media-type':'text/css'})
			pageDirection = 'rtl'

		# Write spine
		spine = SubElement(root, 'spine', {'page-progression-direction':pageDirection})
		SubElement(spine, 'itemref', {'idref':'coverpage', 'linear':'yes'})
		SubElement(spine, 'itemref', {'idref':'toc', 'linear':'yes'})
		i = 0
		xhtmls = self.contents.keys()
		for xhtml in xhtmls:
			i += 1
			SubElement(spine, 'itemref', {'idref':'xhtml'+str(i), 'linear':'yes'})
		
		# Make xml strings
		rough_string = ElementTree.tostring(root, 'utf-8')
		reparsed = minidom.parseString(rough_string)
		contents = reparsed.toprettyxml()
		contents = contents.replace('<?xml version="1.0" ?>', '<?xml version="1.0" encoding="UTF-8"?>')
		
		f = open(path, 'w')
		f.write(contents.encode('utf-8'))
		f.close()
	
	def writeNavCSS(self, path):
		css = u'@charset "utf-8";\n'
		css += u'body{\n'
		css += u'	margin-top:30px;\n'
		css += u'	margin-bottom:30px;\n'
		css += u'	margin-right:10%;\n'
		css += u'	margin-left:10%;\n'
		css += u'}\n'
		css += u'ol{\n'
		css += u'	list-style-type: none;\n'
		css += u'}'

		f = open(path, 'w')
		f.write(css.encode('utf-8'))
		f.close()
	
	def writeNav(self, path):
		root = Element('html', {'xmlns':'http://www.w3.org/1999/xhtml', 'xmlns:epub':'http://www.idpf.org/2007/ops', 'lang':'ja', 'xml:lang':'ja'})
		root.append(Comment(self.xmlComment))
		
		head = SubElement(root, 'head')
		SubElement(head, 'link', {'href':'nav.css', 'rel':'stylesheet', 'type':'text/css'})
		if self.isVertical:
			SubElement(head, 'link', {'href':'vertical.css', 'rel':'stylesheet', 'type':'text/css'})
		SubElement(head, 'title').text = u'目次'

		body = SubElement(root, 'body')
		section = SubElement(body, 'section', {'class':'frontmatter TableOfContents'})
		
		nav = SubElement(section, 'nav', {'epub:type':'toc', 'id':'toc'})
		SubElement(nav, 'h1').text = u'目次'
		
		
		ol = SubElement(nav, 'ol')
		xhtmls = self.contents.keys()
		for xhtml in xhtmls:
			li = SubElement(ol, 'li')
			filename = os.path.basename(xhtml)
			SubElement(li, 'a', {'href':filename}).text = self.contents[xhtml]

		rough_string = ElementTree.tostring(root, 'utf-8')
		reparsed = minidom.parseString(rough_string)
		contents = reparsed.toprettyxml()
		contents = contents.replace('<?xml version="1.0" ?>', '<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE html>')

		f = open(path, 'w')
		f.write(contents.encode('utf-8'))
		f.close()
		
	def writeCover(self, path):
		root = Element('html', {'xmlns':'http://www.w3.org/1999/xhtml', 'xmlns:epub':'http://www.idpf.org/2007/ops', 'lang':'ja', 'xml:lang':'ja'})
		root.append(Comment(self.xmlComment))
		head = SubElement(root, 'head')
		SubElement(head, 'title').text = self.title

		body = SubElement(root, 'body')
		div = SubElement(body, 'div', {'id':'main'})
		
		SubElement(div, 'h1',{'id':'book-title'}).text = self.title
		if not self.subTitle is None:
			SubElement(div, 'h2', {'id':'book-subtitle'}).text = self.subTitle
		SubElement(div, 'p', {'id':'book-author'}).text = self.creator
		SubElement(div, 'p', {'id':'book-translator'}).text = u'[訳] ' + self.translator
		
		rough_string = ElementTree.tostring(root, 'utf-8')
		reparsed = minidom.parseString(rough_string)
		contents = reparsed.toprettyxml()
		contents = contents.replace('<?xml version="1.0" ?>', '<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE html>')

		f = open(path, 'w')
		f.write(contents.encode('utf-8'))
		f.close()
	
	def writeVerticalCSS(self, path):
		css = u'@charset "utf-8";\n'
		css += u'html {\n'
		css += u'	font-family: "HiraMinProN-W3", "@ＭＳ 明朝", serif, sans-serif;\n'
		css += u'	writing-mode: vertical-rl;\n'
		css += u'	-webkit-writing-mode: vertical-rl;\n'
		css += u'	-epub-writing-mode: vertical-rl;\n'
		css += u'	line-height: 1.75;\n'
		css += u'	text-align: justify;\n'
		css += u'}\n'
		css += u'h1{\n'
		css += u'	text-indent: 3em;\n'
		css += u'}\n'
		
		css += u'p{\n'
		css += u'	margin-left: 0px;\n'
		css += u'	margin-right: 0px;\n'
		css += u'}\n'
		
		css += u'p.indented{\n'
		css += u'	text-indent: 1em;\n'
		css += u'}\n'
		
		css += u'.writeDown{\n'
		css += u'	font-style:italic;\n'
		css += u'	margin-left: 2em;\n'
		css += u'	margin-right: 2em;\n'
		css += u'}\n'
		
		css += u'hr{\n'
		css += u'	margin-left: 2em;\n'
		css += u'	margin-right: 2em;\n'
		css += u'}\n'
		
		f = open(path, 'w')
		f.write(css.encode('utf-8'))
		f.close()

	def insertVerticalCSS(self, xhtmlPath):
		contents = codecs.open(xhtmlPath, 'r', 'utf-8').read()
		
		regex = re.compile('<head>(.*?)</head>', re.DOTALL)
		contents = regex.sub( r'<head><link href="vertical.css" rel="stylesheet" type="text/css"/>\1</head>', contents)
		
		# configure indent
		regex = re.compile(u'<p>([^「^<].*?)</p>', re.DOTALL)
		contents = regex.sub(r'<p class="indented">\1</p>', contents)

		f = codecs.open(xhtmlPath, 'w', 'utf-8')
		f.write(contents)
		f.close()
	
	def save(self, path):
		root = 'temp'
		# delete exist directory
		if os.path.exists(root):
			shutil.rmtree(root)
			time.sleep(0.5)
		
		# write files
		os.makedirs(root)
		self.writeMimetype(root + '/mimetype')
		
		os.makedirs(root + '/META-INF')
		self.writeContainer(root + '/META-INF/container.xml')
		
		os.makedirs(root + '/OEBPS')
		self.writeOpf(root + '/OEBPS/bookInfo.opf')
		self.writeNavCSS(root + '/OEBPS/nav.css')
		self.writeNav(root + '/OEBPS/nav.xhtml')

		shutil.copyfile(self.coverPage, root + '/OEBPS/cover.xhtml')
		shutil.copyfile(self.coverImage, root + '/OEBPS/cover.png')
		shutil.copyfile(self.coverImage, root + '/OEBPS/cover-kindle.png')
		
		for image in self.images:			
			shutil.copy(image, root + '/OEBPS')

		os.makedirs(root + '/OEBPS/images')
		for c in self.css:
			shutil.copy(c, root + '/OEBPS')
		
		xhtmls = self.contents.keys()
		for xhtml in xhtmls:
			shutil.copy(xhtml, root + '/OEBPS')
		
		if self.isVertical:
			self.writeVerticalCSS(root + '/OEBPS/vertical.css')
			
			self.insertVerticalCSS(root + '/OEBPS/nav.xhtml')

			xhtmls = self.contents.keys()
			for xhtml in xhtmls:
				filename = os.path.basename(xhtml)
				self.insertVerticalCSS(root + '/OEBPS/' + filename)

		# add minetype to zip
		zip = zipfile.ZipFile(path, 'w', zipfile.ZIP_STORED)
		zip.write(root + '/mimetype', 'mimetype')
		zip.close()
		
		# add other files to zip
		zip = zipfile.ZipFile(path, 'a', zipfile.ZIP_DEFLATED)
		zip.write(root + '/META-INF/container.xml', '/META-INF/container.xml')
		zip.write(root + '/OEBPS/bookInfo.opf', 'OEBPS/bookInfo.opf')
		zip.write(root + '/OEBPS/nav.css', 'OEBPS/nav.css')
		zip.write(root + '/OEBPS/nav.xhtml', 'OEBPS/nav.xhtml')
		zip.write(root + '/OEBPS/cover.xhtml', 'OEBPS/cover.xhtml')
		zip.write(root + '/OEBPS/cover.png', 'OEBPS/cover.png')
		zip.write(root + '/OEBPS/cover.png', 'OEBPS/cover-kindle.png')
		
		for image in self.images:
			filename = os.path.basename(image)
			zip.write(root + '/OEBPS/' + filename, '/OEBPS/' + filename)
			
		for c in self.css:
			filename = os.path.basename(c)
			zip.write(root + '/OEBPS/' + filename, '/OEBPS/' + filename)
		
		if self.isVertical:
			zip.write(root + '/OEBPS/vertical.css', '/OEBPS/vertical.css')
			
		xhtmls = self.contents.keys()
		for xhtml in xhtmls:
			filename = os.path.basename(xhtml)
			zip.write(root + '/OEBPS/' + filename, '/OEBPS/' + filename)

		zip.close()

def main():
	pass
	#~ epub3 = osEpub3()
	#~ epub3.css.append('default.css')
	#~ epub3.contents['Part1.xhtml'] = "Part 1"
	#~ epub3.contents['Part2.xhtml'] = "Part 2"
	#~ epub3.contents['Part3.xhtml'] = "Part 3"
	#~ epub3.save("Makers.epub")
	
if __name__ == '__main__':
	main()